#!/bin/bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} -d or only directory
#%
#% DESCRIPTION
#%    Find
#%    Returns a file with a list of all files of a freeDMS-folder.
#%    Can be called with a freeDMS-folder or a dialog to select one.
#%    __find _finance will return all files inside _finance
#%    in all subprojects. 
#%	  EVEN files in subprojects with no _finance folder yet will
#%    be returned. (Due to the poicy not to put files too deep into
#%    the hierarchy by default.)
#%
#% OPTIONS
#%       -a, --app        to return the path of the APP calling the script.
#%       -D, --dialog	  provides a dialog to select a freeDMS-folder
#%       -h, --help		  Print this help
#%       -v, --version	  Print script information
#%
#% EXAMPLES
#% usage: __find -a %k    typical call from an APP. Will use the path in %k
#%                        will select the _folder where the app is located.
#%                        So you can copy the APP into _finance to get a list
#%                        of all _finance-files in all subprojects.
#%        __find --dialog Will provide a dialog to select a folder-type.
#%                        To be used as APP inside the _admin/_tools
#%        __find _finance As a command line call.
#% 
#% Existing files will be overwritten.
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} 0.0.1
#-    author          Oliver Rafelsberger
#-    copyright       Copyright (c) Oliver Rafelsberger
#-    license         GNU General Public License
#-    script_id       freeDMS_DialogAddFolder
#-
#================================================================
#  HISTORY
#     2016/12/11 : orafelsberger : Script creation
# 
#================================================================
# END_OF_HEADER
#================================================================
# exec > ./logfile.txt


# Definitions ...................................................
freeDMSpath=`__freeDMSpath`										
source ${freeDMSpath}/freeDMS.ini	# set freeDMS-Variables
FileOut=false

# Protect the template ##########################################
# (don't call it inside the template) 							#
currentDir=$(pwd)												#
[[ ${currentDir}* == ${freeDMSpath}/Template* ]] && exit 2		#
#################################################################

# Capture some signals ..........................................
trap 'kill -TERM ${$}; exit 99;' TERM
trap 'exit 99;' INT QUIT TERM
trap 'cleanup' EXIT
cleanup() { dummy="If you need to remove something on breakup - do it here" ; }

source easybashgui 2>/dev/null



#================================================================
#  FILES AND VARIABLES
#================================================================

# General variables..............................................
SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})" # scriptname without path
SCRIPT_DIR="$( cd $(dirname "$0") && pwd )" # script directory



#================================================================
#  FUNCTIONS
#================================================================

# Usage functions ...............................................
usage() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
  



#================================================================
#  PARSE OPTIONS WITH GETOPTS
#================================================================

# Set the short options .........................................
SCRIPT_OPTS='f:a:FDhv-:'


# Set the long options associated with short options ............
typeset -A ARRAY_OPTS
ARRAY_OPTS=(
	[app]=a
	[folder]=f
	[dialog]=D
	[file]=F
	[help]=h
	[man]=h
	[version]=h
)


# Parse options =================================================
current_dir=""
folder_type=""
while getopts ${SCRIPT_OPTS} OPTION ; do
	# Translate long options to short ...........................
	if [[ "x$OPTION" == "x-" ]]; then
		LONG_OPTION=$OPTARG
		LONG_OPTARG=$(echo $LONG_OPTION | grep "=" | cut -d'=' -f2)
		LONG_OPTIND=-1
		[[ "x$LONG_OPTARG" = "x" ]] && LONG_OPTIND=$OPTIND \
                                    || LONG_OPTION=$(echo $OPTARG | cut -d'=' -f1)
		[[ $LONG_OPTIND -ne -1 ]] && eval LONG_OPTARG="\$$LONG_OPTIND"
		OPTION=${ARRAY_OPTS[$LONG_OPTION]}
		[[ "x$OPTION" = "x" ]] &&  OPTION="?" OPTARG="-$LONG_OPTION"
		
		if [[ $( echo "${SCRIPT_OPTS}" | grep -c "${OPTION}:" ) -eq 1 ]]; then
			if [[ "x${LONG_OPTARG}" = "x" ]] || [[ "${LONG_OPTARG}" = -* ]]; then 
				OPTION=":" OPTARG="-$LONG_OPTION"
			else
				OPTARG="$LONG_OPTARG";
				if [[ $LONG_OPTIND -ne -1 ]]; then
					[[ $OPTIND -le $Optnum ]] && OPTIND=$(( $OPTIND+1 ))
					shift $OPTIND
					OPTIND=1
				fi
			fi
		fi
	fi

	# Options follow by another option instead of argument ======
	if [[ "x${OPTION}" != "x:" ]] && [[ "x${OPTION}" != "x?" ]] && [[ "${OPTARG}" = -* ]]; then 
		OPTARG="$OPTION" OPTION=":"
	fi
  
	# Manage options ............................................
	case "$OPTION" in

		a ) current_dir="${OPTARG%/*/*/*}"		# APP call with path
			output_path="${OPTARG%/*}"
		;;

		f ) current_dir="${OPTARG%/*}"			# APP call with path
			folder_type="${current_dir##*/}"	# cutoff all the first entries.
			output_path="${OPTARG%/*}"
			current_dir="${current_dir%/*}"
		;;

		D ) folder_type="--dialog"      		# A dialog shall be shown
		;;

		F ) FileOut=true		                # Add an outputfile
		;;

		h ) usagefull
            exit 0
        ;;
        
		v ) scriptinfo
            exit 0
        ;;
        
		: ) echo "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
            exit 1
        ;;
        
		? ) echo "${SCRIPT_NAME}: -$OPTARG: unknown option"
            exit 1      
        ;;
	esac
done
shift $((${OPTIND} - 1)) # shift options





#================================================================
#  MAIN SCRIPT
#================================================================

# Check if the script was called without any option
# but a parameter (or no parameter) .............................
[[ -z $current_dir ]] && current_dir="$(pwd)"
if [[ $OPTIND -eq 1 ]]; then 			# No option was entered.
	if [[ $# -eq 0 ]]; then				# No parameter was added: 
		folder_type="${current_dir##*/}" # 
		output_path="$current_dir" 
		current_dir="${current_dir%/*}"	#

	else								# A folder_type was given
		folder_type="$1"
		output_path="$current_dir" 
	fi
else

	[[ -z $folder_type ]] && folder_type=${current_dir##*/} 	# 
#	current_dir=${current_dir%/*}								# 
fi

# if the new_project is "--dialog" ..............................
if [[ $folder_type = "--dialog" ]]; then # bring a text entry dialog first		

	cd "${freeDMSpath}/Template/"
	supertitle="Select a folder to search files."
	dselect --width 600 --heigth 400 "${freeDMSpath}/Template/"
	folder_type="$(0< "${dir_tmp}/${file_tmp}" )"	# read the return
	[[ ${#folder_type} -eq 0 ]] && exit 0 
	folder_type=${folder_type##*/}
fi

# header for outputfile ........................................
outputfile="$output_path/_found${folder_type}.files"
outputfolder="$output_path/_found_in${folder_type}"

mkdir -p $outputfolder
echo ____________________________________________________________
echo C: $current_dir
echo F: $folder_type
echo O: $output_path
echo P: $outputfolder
echo

echo "Files in "$current_dir" for "$folder_type
echo
cd $current_dir


# find all folders of this folder_type first ...................
for folder in $(find . -depth -type d -name "*${folder_type}*" ); do
#	echo Folder: $folder
#	echo ------------------------------------------------------- \
#	| [[ FileOut ]] && tee -a $outputfile 
#	echo "$(find "$folder" -depth -type f \
#                 ! -name "*.desktop" \
#                 ! -name "*.me" \
#				 ! -name "TEAM" \
#				 ! -name "_found*" \
#				 ! -path "*/_found*" )" \
#				 | [[ FileOut ]] && tee -a $outputfile
#    echo
	find "$folder" -depth -type f \
                 ! -name "*.desktop" \
                 ! -name "*.me" \
				 ! -name "TEAM" \
				 ! -name "_found*" \
 				 ! -path "*/_found*" \
				 -exec ln -s ../.{} "${outputfolder}" \;

done

# Then search for projects that do not have this folder yet ....
# Search for all freeDMS-projects
for project in $(find -depth -type d -name "$freeDMSkey"); do 

	# now check if the folder_type is there.
	fff=false	
	for folder in $(find "${project%/*}/" -depth -type d \
                         -name "*${folder_type}*") ; do
		[[ -d $folder ]] && fff=true
	done

	# if the folder_type was there, we already had these files.
	if [[ $fff = false ]]; then
#		echo "${project%/*}"
#		echo ======================================================= /
#		| tee [[ FileOut ]] && -a $outputfile
		find "${project%/*}" -depth -mindepth 1 -type f |
		while read pathfile; do
			file="${pathfile##*/}"
			filetyp="${file##*.}"
			if [[ ! $filetyp = "me" ]] && [[ ! $filetyp = "desktop" ]] \
            && [[ ! $filetyp = "TEAM" ]]  && [[ ! ${pathfile} == *"/_"* ]] \
			&& [[ ! ${pathfile} == *"/.freeDMS"* ]]; then
				echo "$pathfile"
				ln -s "../.${pathfile}" "${outputfolder}" \;
			fi
		done 
#		echo | tee [[ FileOut ]] && -a $outputfile
	fi
done

read -p "Press any key ..."

