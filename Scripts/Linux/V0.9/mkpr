#!/bin/bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} -pda /path/to/current/directory  or only directory
#%
#% DESCRIPTION
#%    MaKe PRoject
#%    Transforms any directory into a freeDMS project by adding:
#%       .) a hidden $freeDMSkey directory,
#%       .) an 'ADD FOLDERS HERE'-App,
#%       .) an 'CREATE SUBPROJECT'-App,
#%       .) a Read.me-file.
#%
#% OPTIONS
#%       -p, --path		  Path to current directory
#%       -f, --folder	  like -p but goes one directory down (for inside project)
#%       -a, --admin	  like -p but goes two directories down (for _admin)
#%       -h, --help		  Print this help
#%       -v, --version	  Print script information
#%
#% EXAMPLES
#% usage: mkpr            tries to transform the current ./ directory.
#%        mkpr directory  if 'directory' exists in ./ it will be transformed, 
#%                        if not it will be created.
#%                        if 'directory' is already a $freeDMSkey directory nothing happens.
#%        mkpr -p path/to/directory		 same with path to directory
#%        mkpr -f path/to/directory      if a desktop app in a directory calls the command
#%        mkpr -a path/of/calling/app    if a desktop app in a subdirectory calls the command
#% 
#% Already existing $freeDMSkey directories will not be overwritten due to the -r option.
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} (www.freeDMS.com) 0.0.1
#-    author          Oliver Rafelsberger
#-    copyright       Copyright (c) http://www.freeDMS.com
#-    license         GNU General Public License
#-    script_id       freeDMS_DialogAddFolder
#-
#================================================================
#  HISTORY
#     2016/11/27 : orafelsberger : Script creation
#     2016/12/02 : orafelsberger : Cleaning and Improvements
# 
#================================================================
# END_OF_HEADER
#================================================================
# exec > ./logfile.txt


# Definitions ...................................................
freeDMSpath=`__freeDMSpath`										
source ${freeDMSpath}/freeDMS.ini	# set freeDMS-Variables


# Protect the template ##########################################
# (don't call it inside the template) 							#
currentDir=$(pwd)												#
[[ ${currentDir}* == ${freeDMSpath}/Template* ]] && exit 2		#
#################################################################

# Capture some signals ..........................................
trap 'kill -TERM ${$}; exit 99;' TERM
trap 'exit 99;' INT QUIT TERM
trap 'cleanup' EXIT
cleanup() { dummy="If you need to remove something on breakup - do it here" ; }

source easybashgui



#================================================================
#  FILES AND VARIABLES
#================================================================

# General variables..............................................
SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})" # scriptname without path
SCRIPT_DIR="$( cd $(dirname "$0") && pwd )" # script directory



#================================================================
#  FUNCTIONS
#================================================================

# Usage functions ...............................................
usage() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
  



#================================================================
#  PARSE OPTIONS WITH GETOPTS
#================================================================

# Set the short options .........................................
SCRIPT_OPTS='p:f:a:Dhv-:'


# Set the long options associated with short options ............
typeset -A ARRAY_OPTS
ARRAY_OPTS=(
	[admin]=a
    [folder]=f
	[path]=p
	[help]=h
	[man]=h
	[version]=h
	[dialog]=D
)


# Parse options =================================================
while getopts ${SCRIPT_OPTS} OPTION ; do
	# Translate long options to short ...........................
	if [[ "x$OPTION" == "x-" ]]; then
		LONG_OPTION=$OPTARG
		LONG_OPTARG=$(echo $LONG_OPTION | grep "=" | cut -d'=' -f2)
		LONG_OPTIND=-1
		[[ "x$LONG_OPTARG" = "x" ]] && LONG_OPTIND=$OPTIND || LONG_OPTION=$(echo $OPTARG | cut -d'=' -f1)
		[[ $LONG_OPTIND -ne -1 ]] && eval LONG_OPTARG="\$$LONG_OPTIND"
		OPTION=${ARRAY_OPTS[$LONG_OPTION]}
		[[ "x$OPTION" = "x" ]] &&  OPTION="?" OPTARG="-$LONG_OPTION"
		
		if [[ $( echo "${SCRIPT_OPTS}" | grep -c "${OPTION}:" ) -eq 1 ]]; then
			if [[ "x${LONG_OPTARG}" = "x" ]] || [[ "${LONG_OPTARG}" = -* ]]; then 
				OPTION=":" OPTARG="-$LONG_OPTION"
			else
				OPTARG="$LONG_OPTARG";
				if [[ $LONG_OPTIND -ne -1 ]]; then
					[[ $OPTIND -le $Optnum ]] && OPTIND=$(( $OPTIND+1 ))
					shift $OPTIND
					OPTIND=1
				fi
			fi
		fi
	fi

	# Options follow by another option instead of argument ======
	if [[ "x${OPTION}" != "x:" ]] && [[ "x${OPTION}" != "x?" ]] && [[ "${OPTARG}" = -* ]]; then 
		OPTARG="$OPTION" OPTION=":"
	fi
  
	# Manage options ............................................
	case "$OPTION" in

		p ) parent_dir="${OPTARG%/*}"	# Commandline call with path
			new_project=${OPTARG##*/}	# cutoff all the first entries.
		;;

		f ) parent_dir="${OPTARG%/*}"	# cutoff the last entry as this is a file.
			new_project="--dialog"				
		;;

		a ) parent_dir="${OPTARG%/*/*/*}" # cuttoff the last 3 entries
			# /_admin/_tools/APP.desktop
			new_project="--dialog"				
		;;

		D ) parent_dir=$(pwd)			# a dialog shall be shown  
			new_project="--dialog"		# from shell call
		;;

		h ) usagefull
            exit 0
        ;;
        
		v ) scriptinfo
            exit 0
        ;;
        
		: ) echo "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
            exit 1
        ;;
        
		? ) echo "${SCRIPT_NAME}: -$OPTARG: unknown option"
            exit 1      
        ;;
	esac
done
shift $((${OPTIND} - 1)) # shift options





#================================================================
#  MAIN SCRIPT
#================================================================

# Check if the script was called without any option
# but a parameter (or no parameter) .............................
current_dir=$(pwd)
if [[ $OPTIND -eq 1 ]]; then # No option was entered.
	if [[ $# -eq 0 ]]; then	# No parameter was added: 
		parent_dir="${current_dir%/*}" 	# The current path shall 
		new_project=${current_dir##*/} 	# be used.

	else								# A project-name was given
		parent_dir=$current_dir			# so the project-directory  
		new_project=$1					# shall be added to
	fi
fi



# if the new_project is "--dialog" ..............................
if [[ $new_project = "--dialog" ]]; then # bring a text entry dialog first		

	cd $parent_dir
	defaultentry="NewProject (Just click OK to get a folder-selection dialog!)"

	supertitle="New freeDMS-project"
	input --width 600 --height 100 1 "Enter a new project name. (If you do not enter anything then you can select a directory in a file selection dialog.)" "$defaultentry" 
	param="$(0< "${dir_tmp}/${file_tmp}" )"	# read the return
	[[ ${#param} -eq 0 ]] && exit 0

	if [ "$param" = "$defaultentry" ]; then	# call file-selection dialog
		supertitle="Select a folder to convert it into a freeDMS-project"
		dselect --width 600 --heigth 400 "${parent_dir}/"
		subproject="$(0< "${dir_tmp}/${file_tmp}" )"	# read the return
		[[ ${#subproject} -eq 0 ]] && exit 0 
	else
		parent_dir=$(pwd)
		new_project=$param
		subproject="${parent_dir}/${new_project}"
	fi
else
	subproject="${parent_dir}/${new_project}"
fi


# Check if there is a directoryname in 'param' ..................
if [[ -d $subproject/$freeDMSkey ]]; then # directory is already a project
	supertitle="freeDMS-Alert"
	alert_message --height 100 "Sorry: '$subproject' is already a project."
	exit 1;
fi									
# we now should have a valid subproject with full path
echo "New project: _______________"
echo "$subproject"

source_path=${subproject%/*}
echo $source_path

# check if the master directory is already a project.............
if ! [ -d ${source_path}/$freeDMSkey ]; then	# master directory is not a project
	supertitle="freeDMS-Warning"
	question --height 100 "This will create a new root project! Continue?"
	[[ ${?} -eq 0 ]] && exit 0
    source_path=${freeDMSpath}/Template
fi


# Now copy all the stuff ........................................
mkdir -p ${subproject}
cp -a -n ${source_path}/$freeDMSkey/. $subproject/$freeDMSkey
cp -a -n ${freeDMSpath}/Template/_0_admin/. $subproject/_0_admin
cp "${freeDMSpath}/Template/${buttonAdd}" ${subproject}
cp "${freeDMSpath}/Template/${buttonCreate}" ${subproject}

# decorate the folders and remove them again
# this makes the folders to appear decorated already on first ADD. 
__addDMSfolders -p ${subproject}
__rmempty -p ${subproject}
#__decorate_project -p ${subproject}

__refreshTeam -a $subproject/$toolsFolder/dummy
#read -p "Press any key ..."

