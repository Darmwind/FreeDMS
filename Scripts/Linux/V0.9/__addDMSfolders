#!/bin/bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} -pfam /path/to/current/directory
#%
#% DESCRIPTION
#%    Adds all valid freeDMS-folders to a project or _subfolder.
#%    Depending on the current directory or _subfolder the
#%    appropriate additional _subfolders will be added.
#%    This command is meant to be called from the apps only.
#%    (To ease organizing existing data. __AddAllFolders first,
#%     organize your files and __RemoveEmptyFolders next)
#%
#% OPTIONS
#%    -p, --path	  Path to directory
#%    -f, --folder	  like -p but goes one directory down
#%    -a, --admin	  like -p but goes two directories down
#%    -m, --member    adds only folders inside member-folders
#%    -h, --help	  Print this help
#%    -v, --version	  Print script information
#%
#% EXAMPLES
#%    ${SCRIPT_NAME} -p /path/to/current/directory
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} (www.freeDMS.com) 0.0.1
#-    author          Oliver Rafelsberger
#-    copyright       Copyright (c) http://www.freeDMS.com
#-    license         GNU General Public License
#-    script_id       freeDMS_DialogAddFolder
#-
#================================================================
#  HISTORY
#     2016/11/27 : orafelsberger : Script creation
# 
#================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
#================================================================
# END_OF_HEADER
#================================================================
# exec > ./logfile.txt


# Definitions ...................................................
freeDMSpath=`__freeDMSpath`										
source ${freeDMSpath}/freeDMS.ini	# set freeDMS-Variables


# Protect the template ##########################################
# (don't call it inside the template) 							#
currentDir=$(pwd)												#
[[ ${currentDir}* == ${freeDMSpath}/Template* ]] && exit 2		#
#################################################################

# Capture some signals ..........................................
trap 'kill -TERM ${$}; exit 99;' TERM
trap 'exit 99;' INT QUIT TERM
trap 'cleanup' EXIT
cleanup() { dummy="If you need to remove something on breakup - do it here" ; }




#================================================================
#  FILES AND VARIABLES
#================================================================

# General variables..............................................
SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})" # scriptname without path
SCRIPT_DIR="$( cd $(dirname "$0") && pwd )" # script directory

PATH_GOT=0



#================================================================
#  FUNCTIONS
#================================================================

# Usage functions ...............................................
usage() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
  



#================================================================
#  PARSE OPTIONS WITH GETOPTS
#================================================================

# Set short options .............................................
SCRIPT_OPTS='p:f:a:m:IDhv-:'

# Set long options associated with short one ....................
typeset -A ARRAY_OPTS
ARRAY_OPTS=(
	[admin]=a
    [folder]=f
	[path]=p
	[member]=m
	[info]=I
	[debug]=D
	[help]=h
	[man]=h
)

# Parse options =================================================
while getopts ${SCRIPT_OPTS} OPTION ; do
	# Translate long options to short ...........................
	if [[ "x$OPTION" == "x-" ]]; then
		LONG_OPTION=$OPTARG
		LONG_OPTARG=$(echo $LONG_OPTION | grep "=" | cut -d'=' -f2)
		LONG_OPTIND=-1
		[[ "x$LONG_OPTARG" = "x" ]] && LONG_OPTIND=$OPTIND || LONG_OPTION=$(echo $OPTARG | cut -d'=' -f1)
		[[ $LONG_OPTIND -ne -1 ]] && eval LONG_OPTARG="\$$LONG_OPTIND"
		OPTION=${ARRAY_OPTS[$LONG_OPTION]}
		[[ "x$OPTION" = "x" ]] &&  OPTION="?" OPTARG="-$LONG_OPTION"
		
		if [[ $( echo "${SCRIPT_OPTS}" | grep -c "${OPTION}:" ) -eq 1 ]]; then
			if [[ "x${LONG_OPTARG}" = "x" ]] || [[ "${LONG_OPTARG}" = -* ]]; then 
				OPTION=":" OPTARG="-$LONG_OPTION"
			else
				OPTARG="$LONG_OPTARG";
				if [[ $LONG_OPTIND -ne -1 ]]; then
					[[ $OPTIND -le $Optnum ]] && OPTIND=$(( $OPTIND+1 ))
					shift $OPTIND
					OPTIND=1
				fi
			fi
		fi
	fi

	# Options follow by another option instead of argument ......
	if [[ "x${OPTION}" != "x:" ]] && [[ "x${OPTION}" != "x?" ]] && [[ "${OPTARG}" = -* ]]; then 
		OPTARG="$OPTION" OPTION=":"
	fi
  
	# Manage options ............................................
	case "$OPTION" in

		p ) currentPath="${OPTARG}"
			PATH_GOT=1
		;;

		f ) currentPath="${OPTARG}"
			PATH_GOT=2
		;;

		a ) currentPath="${OPTARG}"
			PATH_GOT=3
		;;

		m ) currentPath="${OPTARG}"
			PATH_GOT=4
		;;

		h ) usagefull
            exit 0
        ;;
        
		v ) scriptinfo
            exit 0
        ;;
        
		: ) echo "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
            exit 1
        ;;
        
		? ) echo "${SCRIPT_NAME}: -$OPTARG: unknown option"
            exit 1
        ;;
	esac
done
shift $((${OPTIND} - 1)) ## shift options





#================================================================
#  MAIN SCRIPT
#================================================================

freeDMStemplate=${freeDMSpath}/Template
[[ $PATH_GOT -eq 0 ]] && currentPath=$(pwd)
[[ $PATH_GOT -eq 2 ]] && currentPath=${currentPath%/*}
[[ $PATH_GOT -eq 3 ]] && currentPath=${currentPath%/*/*/*}
[[ $PATH_GOT -eq 4 ]] && currentPath=${currentPath%/*}
[[ ! -d ${currentPath} ]] && echo "SORRY: \'$currentPath\' is no directory!" && exit 1


# check if the current path is a freeDMS-project having a freeDMSkey-directory.-p
if [[ -d ${currentPath}/$freeDMSkey ]]; then    # If so ...
	tempFolder=$freeDMStemplate # 2>/dev/null	# Start in the root of template
	folderName="Template"
else											# If not ...
	if [[ $PATH_GOT -eq 4 ]]; then				# if --member
		tempFolder=$freeDMSpersonTemplate
	else										# for all others
		# get the foldername of currentpath.
		folderName=${currentPath##*/}
		# find this name in the template.
		tempFolder=$(find $freeDMStemplate -type d -name $folderName)
		[[ ${tempFolder} == "" ]] && echo "Sorry '$folderName' is no freeDMS-folder" && exit 1
	fi
fi


# Now 'tempFolder' is the folder which of we like to add the new folders......
cd $tempFolder
echo "Copy from : $tempFolder"
echo "       to : $currentPath"
newFolder=${currentPath#${tempFolder}/}
echo "New Folder: $folderName"


# Now lets go back and add all the folders
cd "${currentPath}"
echo $PATH_GOT


# if called from within the folder ..............................
if [[ $PATH_GOT -eq 2 ]]; then
	for folder in $(find "$tempFolder" -mindepth 1 -maxdepth 1 -type d) ; do
		mkdir ${folder##*/}
		if [[ ${folder##*/} == "_0_tools" ]]; then
			echo "no folders for _0_tools."
		else
			cp -n "${buttonAdd}" "${folder##*/}" 
		fi
	done

else	# if called from a _subfolder like _tools  or _admin ....
	cp -n -R "${tempFolder}"/. "${currentPath}"/
fi

rm "${buttonAdd}"
cp -n "${freeDMStemplate}/${buttonSub}" ${currentPath}
cp -n "${freeDMStemplate}/${buttonFind}" ${currentPath}

if [[ ! -d "${currentPath}/$freeDMSkey" ]]; then
	mkdir $folderKeep "${currentPath}"
	gvfs-set-attribute $currentPath/$folderKeep::custom-icon "file://$freeDMSicons/folder-keep.svg" 2>/dev/null
fi

for folder in $(find "$tempFolder" -mindepth 1 -maxdepth 1 -type d) ; do
	[[ -e ${folder}/Read.me ]] && cp ${folder}/Read.me ${currentPath}/${folder##*/}
done

__decorate_project -p ${currentPath}
read -p "Press [Enter] key to contiue ..."

