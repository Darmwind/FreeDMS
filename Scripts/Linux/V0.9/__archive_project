#!/bin/bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} -pa /path/to/directory/to/archive
#%
#% DESCRIPTION
#%    Once a project is finished it can be arcived. That is:
#%      * Copying the _keep_this-folders into the master projects
#%        _admin/_check_this/-folder.
#%      * Compressing the project folder and
#%      * Removing the whole directory.
#%    The user can then move it into the _archives folder manually.
#%
#% OPTIONS
#%    -p, --path      defines the path to current directory
#%    -a, --admin	  like -p but goes two directories down
#%    -h, --help	  Print this help
#%    -v, --version	  Print script information
#%
#% EXAMPLES
#%    ${SCRIPT_NAME} -p /path/to/current/directory
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} (www.freeDMS.com) 0.0.1
#-    author          Oliver Rafelsberger
#-    copyright       Copyright (c) http://www.freeDMS.com
#-    license         GNU General Public License
#-    script_id       freeDMS_DialogAddFolder
#-
#================================================================
#  HISTORY
#     2016/12/09 : orafelsberger : Script creation
# 
#================================================================
# END_OF_HEADER
#================================================================
# exec > ./logfile.txt

# Definitions ...................................................
freeDMSpath=`__freeDMSpath`										
source ${freeDMSpath}/freeDMS.ini	# set freeDMS-Variables


# Protect the template ##########################################
# (don't call it inside the template) 							#
currentDir=$(pwd)												#
[[ ${currentDir}* == ${freeDMSpath}/Template* ]] && exit 2		#
#################################################################

# Capture some signals ..........................................
trap 'kill -TERM ${$}; exit 99;' TERM
trap 'exit 99;' INT QUIT TERM
trap 'cleanup' EXIT
cleanup() { dummy="If you need to remove something on breakup - do it here" ; }



#================================================================
#  FILES AND VARIABLES
#================================================================

# General variables..............................................
SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})" # scriptname without path
SCRIPT_DIR="$( cd $(dirname "$0") && pwd )" # script directory




#================================================================
#  FUNCTIONS
#================================================================

# Usage functions ...............................................
usage() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
  


#================================================================
#  PARSE OPTIONS WITH GETOPTS
#================================================================

# Set short options .............................................
SCRIPT_OPTS='a:hv-:'

# Set long options associated with short one ....................
typeset -A ARRAY_OPTS
ARRAY_OPTS=(
	[admin]=a
	[help]=h
	[man]=h
)


# Parse options =================================================
while getopts ${SCRIPT_OPTS} OPTION ; do
	# Translate long options to short ...........................
	if [[ "x$OPTION" == "x-" ]]; then
		LONG_OPTION=$OPTARG
		LONG_OPTARG=$(echo $LONG_OPTION | grep "=" | cut -d'=' -f2)
		LONG_OPTIND=-1
		[[ "x$LONG_OPTARG" = "x" ]] && LONG_OPTIND=$OPTIND || LONG_OPTION=$(echo $OPTARG | cut -d'=' -f1)
		[[ $LONG_OPTIND -ne -1 ]] && eval LONG_OPTARG="\$$LONG_OPTIND"
		OPTION=${ARRAY_OPTS[$LONG_OPTION]}
		[[ "x$OPTION" = "x" ]] &&  OPTION="?" OPTARG="-$LONG_OPTION"
		
		if [[ $( echo "${SCRIPT_OPTS}" | grep -c "${OPTION}:" ) -eq 1 ]]; then
			if [[ "x${LONG_OPTARG}" = "x" ]] || [[ "${LONG_OPTARG}" = -* ]]; then 
				OPTION=":" OPTARG="-$LONG_OPTION"
			else
				OPTARG="$LONG_OPTARG";
				if [[ $LONG_OPTIND -ne -1 ]]; then
					[[ $OPTIND -le $Optnum ]] && OPTIND=$(( $OPTIND+1 ))
					shift $OPTIND
					OPTIND=1
				fi
			fi
		fi
	fi

	# Options follow by another option instead of argument ......
	if [[ "x${OPTION}" != "x:" ]] && [[ "x${OPTION}" != "x?" ]] && [[ "${OPTARG}" = -* ]]; then 
		OPTARG="$OPTION" OPTION=":"
	fi
  
	# Manage options ............................................
	case "$OPTION" in

		a ) currentPath="${OPTARG%/*/*/*}"
		;;

		h ) usagefull
            exit 0
        ;;
        
		v ) scriptinfo
            exit 0
        ;;
        
		: ) echo "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
            exit 1
        ;;
        
		? ) echo "${SCRIPT_NAME}: -$OPTARG: unknown option"
            exit 1
        ;;
	esac
done
shift $((${OPTIND} - 1)) ## shift options





#================================================================
#  MAIN SCRIPT
#================================================================


projectName=${currentPath##*/}
masterProject=${currentPath%/*}
echo
echo Current: $currentPath
echo Master : $masterProject
echo Project: $projectName
echo
__rmempty -p "$currentPath"


# Copy Folders first ............................................
for folder in $(find $currentPath -name "_keep_this" -type d ) ; do
	echo "${folder%/*}"
	targetFolder=${folder%/*}
	targetFolder=`echo $targetFolder | sed 's/'"$projectName"'/'"_0_admin\/_check_this\/$projectName"'/g'`
	echo "$targetFolder"
	mkdir -p "$targetFolder"
done


# then copy the files ...........................................
for folder in $(find $currentPath -name "_keep_this") ; do
	echo "$folder"
	targetFolder=${folder%/*}
	targetFolder=`echo $targetFolder | sed 's/'"$projectName"'/'"_0_admin\/_check_this\/$projectName"'/g'`
	echo $targetFolder
	cp -pn -r $folder/* $targetFolder/
done


# finally compress the project and remove project folder ........
cd "$masterProject"
tar czf "$projectName".tar.gz "$projectName" --remove-files 2>/dev/null

